Index: visualizer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- visualizer.py	(revision a157ccd5e2c23473a65d0bd7dccba692de18871a)
+++ visualizer.py	(date 1592065925800)
@@ -4,6 +4,7 @@
 import matplotlib.pyplot as plt
 from matplotlib.colors import from_levels_and_colors
 from matplotlib.collections import LineCollection
+from matplotlib.pyplot import Line2D
 import torch
 
 font = {'size'   : 18}
@@ -15,27 +16,26 @@
 data = np.load("data/sim_arima.npy")
 high = np.ceil(data.max())
 low = np.floor(data.min())
-
 T=500
-
 fig, ax = plt.subplots(figsize=(12, 6))
 for i in range(10):
     if i % 2 == 0:
-        ax.plot(np.arange(i*T, (i+1)*T), data[i*T:(i+1)*T], color="r")
+        ax.plot(np.arange(i*T+1, (i+1)*T+1, 2), data[i*T+1:(i+1)*T+1:2], color="r")
     else:
-        ax.plot(np.arange(i*T, (i+1)*T), data[i*T:(i+1)*T], color="b")
+        ax.plot(np.arange(i*T+1, (i+1)*T+1, 2), data[i*T+1:(i+1)*T+1:2], color="b", linestyle="--")
 plt.xlim([0, len(data)])
 plt.ylim([low, high])
 plt.xlabel(r"$t$")
 plt.ylabel(r"$y_t$")
-plt.savefig("figures/sim_arima_data.png", dpi=1000, bbox_inches='tight')
+plt.legend([r"$k=1$", r"$k=2$"])
+plt.savefig("figures/sim_arima_data.png", dpi=700, bbox_inches='tight')
 
 # -----------------------------
 
 # %% Simulated MA process with markovian switching data
 
 data = pkl.load(open("data/sim_arima_markov.pkl", "rb"))
-state_list = data[1]
+state_list = data[1][::2]
 data = data[0]
 
 high = np.ceil(data.max())
@@ -43,26 +43,35 @@
 
 fig, ax = plt.subplots(figsize=(12, 6))
 color_list = ["r" if x == 0 else "b" for x in state_list]
+style_list = ["-" if x == 0 else "--" for x in state_list]
 
 cmap, norm = from_levels_and_colors([0, 1, 2], ['red', 'blue'])
-points = np.array([np.arange(len(data)), data]).T.reshape(-1, 1, 2)
+points = np.array([np.arange(0, len(data), 2), data[::2]]).T.reshape(-1, 1, 2)
 segments = np.concatenate([points[:-1], points[1:]], axis=1)
-lines = LineCollection(segments, cmap=cmap, norm=norm)
+lines = LineCollection(segments, cmap=cmap, norm=norm, linestyles=style_list)
 lines.set_array(np.array(state_list).astype(int))
 ax.add_collection(lines)
 
+circ1 = Line2D([0], [0], linestyle="-", color="red")
+circ2 = Line2D([0], [0], linestyle="--", color="blue")
+ax.add_line(circ1)
+ax.add_line(circ2)
+
+plt.legend((circ1, circ2), (r"$k=1$", r"$k=2$"))
+
 plt.xlim([0, len(data)])
 plt.ylim([low, high])
 plt.xlabel(r"$t$")
 plt.ylabel(r"$y_t$")
-plt.savefig("figures/sim_arima_markov_data.png", dpi=1000, bbox_inches='tight')
+
+plt.savefig("figures/sim_arima_markov_data.png", dpi=700, bbox_inches='tight')
 
 # -----------------------------
 
 # %% Simulated sinusoidal with markovian switching data
 
 data = pkl.load(open("data/sim_sin_markov.pkl", "rb"))
-state_list = data[1]
+state_list = data[1][::2]
 data = data[0]
 
 high = np.ceil(data.max())
@@ -70,25 +79,35 @@
 
 fig, ax = plt.subplots(figsize=(12, 6))
 color_list = ["r" if x == 0 else "b" for x in state_list]
+style_list = ["-" if x == 0 else "--" for x in state_list]
 
 cmap, norm = from_levels_and_colors([0, 1, 2], ['red', 'blue'])
-points = np.array([np.arange(len(data)), data]).T.reshape(-1, 1, 2)
+points = np.array([np.arange(0, len(data), 2), data[::2]]).T.reshape(-1, 1, 2)
 segments = np.concatenate([points[:-1], points[1:]], axis=1)
-lines = LineCollection(segments, cmap=cmap, norm=norm)
+lines = LineCollection(segments, cmap=cmap, norm=norm, linestyles=style_list)
 lines.set_array(np.array(state_list).astype(int))
 ax.add_collection(lines)
 
+circ1 = Line2D([0], [0], linestyle="-", color="red")
+circ2 = Line2D([0], [0], linestyle="--", color="blue")
+ax.add_line(circ1)
+ax.add_line(circ2)
+
+plt.legend((circ1, circ2), (r"$k=1$", r"$k=2$"))
+
+
 plt.xlim([0, len(data)])
 plt.ylim([low, high])
 plt.xlabel(r"$t$")
 plt.ylabel(r"$y_t$")
-plt.savefig("figures/sim_sin_markov_data.png", dpi=1000, bbox_inches='tight')
+plt.savefig("figures/sim_sin_markov_data.png", dpi=700, bbox_inches='tight')
 
 # -----------------------------
 
 # %% Belief state for simulated MA process with deterministic switching
 
-model = pkl.load(open("results/227478991_markov_rnn_sim_arima_none_model.pkl", "rb"))
+# model = pkl.load(open("results/227478991_markov_rnn_sim_arima_none_model.pkl", "rb"))
+model = pkl.load(open("results/110041513_markov_rnn_USDEUR_none_model.pkl", "rb"))
 
 
 def sigmoid(x, alpha=1):
@@ -97,26 +116,40 @@
 
 beliefs = torch.stack(model.all_belief_list).squeeze().detach().numpy()
 w = 121
-alpha = 15
+alpha = 10
 beliefs_0 = sigmoid(np.convolve(beliefs[:, 0], np.ones(w) / w, "valid")-0.5, alpha)
 beliefs_1 = sigmoid(np.convolve(beliefs[:, 1], np.ones(w) / w, "valid")-0.5, alpha)
 diff = len(beliefs) - len(beliefs_1)
 fig, ax = plt.subplots(figsize=(12, 8))
 ax.plot(np.arange(diff / 2, len(beliefs) - diff / 2), beliefs_0, 'r')
-ax.plot(np.arange(diff / 2, len(beliefs) - diff / 2), beliefs_1, 'b')
-for i in range(10):
-    if i % 2:
+ax.plot(np.arange(diff / 2, len(beliefs) - diff / 2), beliefs_1, 'b--')
+
+f = np.array(beliefs_0 >= beliefs_1, dtype=int)
+f_ = np.where(f[1:] - f[:-1] != 0)
+
+j = 0
+for i in f_:
+    j = j + 1
+    if j % 2:
         color = 'b'
     else:
         color = 'r'
+
+    if j == len(f_):
+        d = len(beliefs_0) - f_[i]
+    else:
+        d = f_[i + 1] - f_[i]
+
     rect = plt.Rectangle((500*i, 0), 500, 1, alpha=0.2, color=color)
     ax.add_patch(rect)
+
 plt.xlim([diff / 2, len(beliefs) - diff / 2])
-plt.ylim([0, 1])
+plt.ylim([0.3, 0.7])
 plt.xlabel(r"$t$")
 plt.ylabel(r"$\alpha_t$")
 plt.legend([r"$k=1$", r"$k=2$"])
-plt.savefig("figures/sim_arima_beliefs.png", dpi=1000, bbox_inches='tight')
+plt.show()
+# plt.savefig("figures/USDEUR_beliefs.png", dpi=700, bbox_inches='tight')
 
 
 # %% Belief state for simulated MA process with makovian switching
@@ -163,7 +196,7 @@
 plt.xlim([4381, 4581])
 plt.ylim([-2, 3])
 plt.legend(["target", "prediction"])
-plt.xlabel("iteration")
+plt.xlabel("time step")
 plt.ylabel("value")
 from mpl_toolkits.axes_grid1.inset_locator import inset_axes
 axins = inset_axes(ax, 4, 1, loc=3) # zoom-factor: 2.5, location: upper-left
@@ -174,5 +207,5 @@
 plt.xticks(visible=False)
 from mpl_toolkits.axes_grid1.inset_locator import mark_inset
 mark_inset(ax, axins, loc1=2, loc2=4, fc="none", ec="0.5")
-
+plt.show()
 plt.savefig("figures/zoom_sim_arima.png", dpi=1000, bbox_inches='tight')
\ No newline at end of file
